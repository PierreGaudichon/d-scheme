// Generated by CoffeeScript 1.8.0
(function() {
  var Lexer, Molecule, Type;

  Molecule = require("./Expressions/Molecule").Molecule;

  Type = require("./Type").Type;

  module.exports.lexe = function(list) {
    return new Lexer(list).create().out();
  };

  module.exports.Lexer = Lexer = (function() {
    Lexer.prototype.tree = [];

    Lexer.prototype.lexems = [];

    function Lexer(lexems) {
      this.lexems = lexems;
      this.tree = [];
    }

    Lexer.prototype.create = function() {
      while (this.lexems.length > 0) {
        if (this.lexems.shift().value === "(") {
          this.tree.push(this.createMolecule());
        }
      }
      return this;
    };

    Lexer.prototype.out = function() {
      return this.tree;
    };

    Lexer.prototype.createMolecule = function() {
      var atom, exp, lexem, ret;
      ret = [];
      while (this.lexems.length > 0) {
        lexem = this.lexems.shift();
        if (lexem.value === "(") {
          exp = this.createMolecule();
          ret.push(exp);
        } else if (lexem.value === ")") {
          return new Molecule(ret);
        } else {
          atom = Type.infereFromLexem(lexem);
          ret.push(atom);
        }
      }
      return console.log("not touch");
    };

    return Lexer;

  })();


  /*
  
  (* (+ 2 4) (- 1 2))
  s = []
  t = []
   */

}).call(this);
